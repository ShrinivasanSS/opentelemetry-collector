// Copyright  The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "esc -pkg tmplgen -o resources.go -modtime 0 ../templates/"; DO NOT EDIT.

package tmplgen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/component_header.html": {
		name:    "component_header.html",
		local:   "../templates/component_header.html",
		size:    162,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/6quVklUsLJV0HPOzy3Iz0vNK3HNSynIz8wrqa3l5aquVsnJzMsGK/DJzMuGiOkqZKYp
QCR0QSIKCgoKNhlmdjaJChlFqWm2SiBDa2uV7Kqr9fwSc1Nra230E+1s9DPM7CDaU3OKU1G1IqlEqMpL
ASkCBAAA//8+cKQXogAAAA==
`,
	},

	"/templates/extensions_table.html": {
		name:    "extensions_table.html",
		local:   "../templates/extensions_table.html",
		size:    363,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/2yQQU/DMAyF70j8ByvsyFbOVRoOCI4c+AdZ81YiUqdKPTaI8t9RO3UUiZxi+Xv289Ni
9wE0yldAo/YxOaTtONjWc1fTgzK3N0REOW8s1Q3tnmI/RAbLM7shepZSFiJZ7kCbFE+eHc7383cWvcXT
uHAXdkv+QPgE//JrYHpa0tWWbT+6FI/saroDsLi6zEIY8Y/Y5Ax2tF23tDiywXfcqBYsSMpoS+8Jh0ZN
J5by+I2zgEcfmW2PJufdyzGEV9ujFGX+lLqyRlfiVm50JekaGdhNy3U1Z2x+AgAA//9KsdgyawEAAA==
`,
	},

	"/templates/footer.html": {
		name:    "footer.html",
		local:   "../templates/footer.html",
		size:    16,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7LRT8pPqbTj5bLRzyjJzbEDBAAA//92BHIGEAAAAA==
`,
	},

	"/templates/header.html": {
		name:    "header.html",
		local:   "../templates/header.html",
		size:    477,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5TRMUsDMRQH8L3Q7xCzShOti0juHNTBQXTo4hhz7y7PJnlH8mo5Sr+7xLaI4KBTQv7h
x+P9zdn9893q9eVBeI6hnc9MPUWwaWgkJNkaD7Zr5zMhhDAR2ArnbS7Ajdxwv7iWp4yRA7S7nVrVy35v
9OHlGAdMa5EhNLJ4yuw2LNBRksJn6Bup9Xa7VTRCYggQgfOkkHRvP+ovhY6k/oXiKUDxAHxyPPNYbrTu
KXFRA9EQwI5YlKOoK3Xb24hhap4sQ0Ybzh8dpSL/YzvqQA3AsQt1xkt1pS50PHoKU4cDLUZMaxUxKVe+
9eIyjiw66CGLkt1fzeq8F9kafRBqT/pYjHmjbvoqbvlj+37ZfgYAAP//+IIhkt0BAAA=
`,
	},

	"/templates/pipelines_table.html": {
		name:    "pipelines_table.html",
		local:   "../templates/pipelines_table.html",
		size:    1974,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7SVwY7TMBCG70i8gxVWPdENXLuJOcAicQChFS/gONNirTu2xu5udkPeHcWN3YSUA3Rz
qezm9/yab/44hReVBub8k4YyqwzVQGtnhVS427B3GX/9ijHGCk/D6rirmTTaWYHleya02mGpYet5UfHP
B62/iT0UecWL3NfTY3yFlbM3x99f481cO7OQgB6oN/mC9uB/PNllXb4evPDgPgkvFvW5AwnqAcgt6vKd
jATnzMI2t4015OfNFHmKUNteCbYp2fVHs7cGAf0t1tYo9F0XFSRwB+yKzKPCGpq3YRkO3ZlHF3VH7Zqp
LYMHwJN+LBjymzIu5P2OzAHrDXsDABkf1wLt4Mxh3raANVuPH/XM2ra3vI6h77rQ8T/SjFVSqi8rM4rt
/xUaZpodhzrmM50NyDQbkP1sgn1K858YQ3XBfhJsy6zPQNd9eLbKglYIKPZQzmiunmWMSBKAnPx/r7Au
afDMeFQUueBn7CuadQNYT6b64sBWJIhu/gLRkokQLZkE8fSyLkPRkplTtNE0YAyS8xjPd7Q4yAQNGhuh
QWMTtHT1LMMMGjtnBoNnQBYUlyVvsj1dmIO0yMPnmv8OAAD//5kR2962BwAA
`,
	},

	"/templates/properties_table.html": {
		name:    "properties_table.html",
		local:   "../templates/properties_table.html",
		size:    433,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/2yRwWrzMBCE74G8w5I//Kc6ztmV9QKF0lPvsjU1psraSJvSoOjdi+I42LQ6CKSdTzOM
VKNjPLyaE1KqVNno7UaJaRwoyMWh3jWDt/BFGE3bc1fRcae3GyKiGGnfs8U3VTUdKaX52hvucJ890R4O
J7Bk1eHNDyO89AizfEIK6j8IX+A7tpzmpcQ/8pj2s/PDmW1F/wDMcaaH4AL+gHWMYEvFcqTEknF9x3UL
Fnh9q2KOe+0gL7iklDtRpVi9IvV/bsL4PO3X5eG3du2ytng37oxssoZK8Y+WwTbHVuXtW/RPAAAA//9V
rKnCsQEAAA==
`,
	},

	"/templates": {
		name:  "templates",
		local: `../templates/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"../templates/": {
		_escData["/templates/component_header.html"],
		_escData["/templates/extensions_table.html"],
		_escData["/templates/footer.html"],
		_escData["/templates/header.html"],
		_escData["/templates/pipelines_table.html"],
		_escData["/templates/properties_table.html"],
	},
}
